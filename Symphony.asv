%  Copyright (c) 2012 Howard Hughes Medical Institute.
%  All rights reserved.
%  Use is subject to Janelia Farm Research Campus Software Copyright 1.1 license terms.
%  http://license.janelia.org/license/jfrc_copyright_1_1.html

classdef (Sealed) Symphony < handle
    %% Properties
    properties
        mainWindow                  % Figure handle of the main window
        
        rigConfigClassNames
        rigConfigDisplayNames
        rigConfig
        rigConfigValue
        lastChosenRigConfig
        
        protocolsDir                % path to directory containing currently listed protocols
        protocolClassNames          % The list of protocol class names.
        protocolDisplayNames
        protocol                    % The current protocol instance.
        protocolValue
        
        figureHandlerClasses        % The list of available figure handlers.
        
        missingDeviceName
        sources                     % The hierarchy of sources.
        controls                    % A structure containing the handles for most of the controls in the UI.
        rigNames
        
        persistPath
        persistor                   % The Symphony.EpochPersistor instance.
        epochGroup                  % A structure containing the current epoch group's properties.
        prevEpochGroup
        wasSavingEpochs
        metadataDoc
        metadataNode
        notesNode
        
        symphonyDir
        logFileFolder
        hiddenLogFileFolder
        
        loggingOnDefault
        logging
    end
    
    %% Constructor
    methods (Access = private)
        function obj = Symphony
            import Symphony.Core.*;
            
            obj = obj@handle();
            
            obj.symphonyDir = fileparts(mfilename('fullpath'));
            symphonyParentDir = fileparts(obj.symphonyDir);
            
            addpath(genpath(fullfile(obj.symphonyDir, 'Rig_Configurations')));
            
            if ~exist([symphonyParentDir '/debug_logs'],'dir')
                mkdir(symphonyParentDir,'debug_logs');
            end
            Logging.ConfigureLogging(fullfile(obj.symphonyDir, 'debug_log.xml'), [symphonyParentDir '/debug_logs']);
            
            % See what rig configurations, protocols, figure handlers and sources are available.
            obj.discoverRigConfigurations();
            obj.discoverFigureHandlers();
            obj.discoverSources();
            
            obj.hiddenLogFileFolder = fullfile(obj.symphonyDir, 'log_files_hidden');
            obj.loggingOnDefault = 0;
            obj.logging = 0;
            
            if ispref('SymphonyProtocol', 'logFileFolder')
                obj.logFileFolder = getpref('SymphonyProtocol', 'logFileFolder');
            else
                obj.logFileFolder = fullfile(obj.symphonyDir, 'log_files');
                setpref('SymphonyProtocol', 'logFileFolder', obj.logFileFolder);
            end
            
            
            obj.setRigConfig();
            
            if ~isempty(obj.rigConfig)
                obj.setRigProtocols();
                obj.createNewProtocol(1);
                
                if ~isempty(obj.rigConfig)
                    % Create and open the main window.
                    obj.showMainWindow();
                    obj.updateUIState();
                end
            else
                obj.closeRequestOnError();
            end
        end
    end
    
    %% Instantiation Method for the Symphony Application
    methods (Static)
        function singleObj = getInstance
            persistent localObj
            if isempty(localObj) || ~isvalid(localObj)
                localObj = Symphony;
            end
            singleObj = localObj;
        end
    end
    
    methods
        %% Rig Configurations
        function discoverRigConfigurations(obj)
            % Get the list of rig configurations from the folder.
            symphonyPath = mfilename('fullpath');
            parentDir = fileparts(symphonyPath);
            configsDir = fullfile(parentDir, 'Rig_Configurations');
            
            rigConfigList = dir(fullfile(configsDir));
            rigConfigListLength = length(rigConfigList) - 2;
            obj.rigConfigClassNames = cell(1, rigConfigListLength);
            obj.rigConfigDisplayNames = cell(1, rigConfigListLength);
            
            for d = 1:length(rigConfigList)
                if rigConfigList(d).isdir && ~ismember(rigConfigList(d).name,{'.','..'})
                    rigConfigFolder =  rigConfigList(d);
                    className = rigConfigFolder.name;
                    arrayNo = d - 2;
                    obj.rigConfigClassNames{arrayNo} = className;
                    obj.rigConfigDisplayNames{arrayNo} = classProperty(className, 'displayName');
                    
                    if isempty(obj.rigConfigDisplayNames{arrayNo})
                        obj.rigConfigDisplayNames{arrayNo} = className;
                    end
                end
            end
        end
        
        function chooseRigConfiguration(obj, ~, ~)
            if ~isempty(obj.rigConfig)
                obj.rigConfig.close()
            end
            
            configIndex = get(obj.controls.rigConfigPopup, 'Value');
            configClassName = obj.rigConfigClassNames{configIndex};
            
            try
                constructor = str2func(configClassName);
                obj.rigConfig = constructor();
                
                setpref('Symphony', 'LastChosenRigConfig', configClassName);
                obj.lastChosenRigConfig = configClassName;
                obj.rigConfigValue = configIndex;
                obj.setRigProtocols();
                set(obj.controls.protocolPopup, 'String', obj.protocolDisplayNames, 'Value', 1);
            catch ME
                % The user cancelled editing the parameters so switch back to the previous protocol.
                configValue = find(strcmp(obj.rigConfigClassNames, class(obj.rigConfig)));
                set(obj.controls.rigConfigPopup, 'Value', configValue);
                
                waitfor(errordlg(['Could not create the device:' char(10) char(10) ME.message], 'Symphony'));
            end
        end
        
        function showRigConfigurationDescription(obj, ~, ~)
            desc = obj.rigConfig.describeDevices();
            waitfor(msgbox([obj.rigConfig.displayName ':' char(10) char(10) desc], 'Rig Configuration', 'modal'));
        end
        
        function setRigConfig(obj)
            import Symphony.Core.*;
            
            obj.lastChosenRigConfig = getpref('Symphony', 'LastChosenRigConfig', obj.rigConfigClassNames{1});
            obj.rigConfigValue = find(strcmp(obj.rigConfigClassNames, obj.lastChosenRigConfig));
            
            try
                constructor = str2func(obj.lastChosenRigConfig);
                obj.rigConfig = constructor();
            catch ME
                % Cannot create a rig config the same as the last one chosen by the user.
                % Try to make a default one instead.
                clear obj.rigConfig;
                
                if ~strcmp(ME.message, 'User Cancelled')
                    allowMultiClampDevices = ~strcmp(ME.identifier, 'Symphony:MultiClamp:UnknownMode');
                    
                    for i = 1:length(obj.rigConfigClassNames)
                        constructor = str2func(obj.rigConfigClassNames{i});
                        try
                            obj.rigConfig = constructor(allowMultiClampDevices);
                            obj.lastChosenRigConfig = obj.rigConfigClassNames{i};
                            obj.rigConfigValue = i;
                            break
                        catch ME
                            clear obj.rigConfig;
                            
                            if ~strcmp(ME.message, 'User Cancelled')
                                disp(['Could not create a ' obj.rigConfigClassNames{i}]);
                                allowMultiClampDevices = ~strcmp(ME.identifier, 'Symphony:MultiClamp:UnknownMode');
                            else
                                break;
                            end
                        end
                    end
                end
            end
        end
        
        %% Protocols
        function setRigProtocols(obj)
            symphonyPath = mfilename('fullpath');
            parentDir = fileparts(symphonyPath);
            currentRigConfig = obj.lastChosenRigConfig;
            currentRigProtocolsDir = fullfile(parentDir, 'Rig_Configurations', currentRigConfig, 'Protocols');
            currentRigProtocolsList = dir(fullfile(currentRigProtocolsDir, '*.m'));
            
            protocolCount = 0;
            errorCount = 0;
            arrayLength = length(currentRigProtocolsList);
            
            tempProtocolClassNames = cell(arrayLength,1);
            tempProtocolDisplayNames = cell(arrayLength,1);
            
            errorString = 'The folling m files were not loaded due to an incorrect rigIdentifier property value';
            errorFiles = '';
            
            for f = 1:arrayLength
                className = currentRigProtocolsList(f).name(1:end-2);
                rigCompatibility = classProperty(className, 'rigIdentifier');
                if strcmp(currentRigConfig,rigCompatibility)
                    protocolCount = protocolCount + 1;
                    tempProtocolClassNames{protocolCount} = className;
                    tempProtocolDisplayNames{protocolCount} = classProperty(className, 'displayName');
                    
                    if isempty(tempProtocolClassNames{protocolCount})
                        tempProtocolClassNames{protocolCount} = className;
                    end
                else
                    errorCount = errorCount + 1;
                    errorFiles = strcat(errorFiles, currentRigProtocolsList(f).name, ' ');
                end
            end
            
            obj.protocolClassNames = cell(protocolCount, 1);
            obj.protocolDisplayNames = cell(protocolCount, 1);
            
            for f = 1:protocolCount
                obj.protocolClassNames{f} = tempProtocolClassNames{f};
                obj.protocolDisplayNames{f} = tempProtocolDisplayNames{f};
            end
            
            obj.protocolValue = 1;
            
            if errorCount > 0
                errordlg({errorString ; errorFiles});
            end
            
            obj.createNewProtocol(obj.protocolValue);
        end
        
        function createNewProtocol(obj, pV)
            try
                obj.protocol = obj.createProtocol(obj.protocolClassNames{pV});
            catch ME
                disp(['Could not create a ' obj.protocolClassNames{pV} '(' ME.message ')']);
            end
            
            if isempty(obj.protocol)
                error('Symphony:NoProtocol', 'Could not create any protocol');
            end
        end
        
        function newProtocol = createProtocol(obj, className)
            if ~isempty(obj.protocol)
                obj.protocol.closeLog();
            end
            
            % Create an instance of the protocol class.
            constructor = str2func(className);
            newProtocol = constructor(obj.logging, {obj.logFileFolder,obj.hiddenLogFileFolder});
            
            newProtocol.rigConfig = obj.rigConfig;
            newProtocol.figureHandlerClasses = obj.figureHandlerClasses;
            
            % Use any previously set parameters.
            params = getpref('Symphony', [className '_Defaults'], struct);
            paramNames = fieldnames(params);
            for i = 1:numel(paramNames)
                paramProps = findprop(newProtocol, paramNames{i});
                if ~isempty(paramProps) && ~paramProps.Dependent
                    newProtocol.(paramNames{i}) = params.(paramNames{i});
                end
            end
            
            addlistener(newProtocol, 'StateChanged', @(source, event)protocolStateChanged(obj, source, event));
        end
        
        function protocolStateChanged(obj, ~, ~)
            obj.updateUIState();
        end
        
        function chooseProtocol(obj, ~, ~)
            % The user chose a protocol from the pop-up.
            
            pluginIndex = get(obj.controls.protocolPopup, 'Value');
            protocolClassName = obj.protocolClassNames{pluginIndex};
            
            % Create a new protocol if the user chose a different protocol class.
            if ~isa(obj.protocol, protocolClassName)
                try
                    newProtocol = obj.createProtocol(protocolClassName);
                catch ME
                    waitfor(errordlg(['Could not create a ''' protocolClassName ''' instance.' char(10) char(10) ME.message], 'Symphony'));
                    newProtocol = [];
                end
                
                if ~isempty(newProtocol) && editParameters(newProtocol)
                    obj.protocol.closeFigures();
                    
                    obj.protocol = newProtocol;
                    setpref('Symphony', 'LastChosenProtocol', protocolClassName);
                    
                    if ~obj.protocol.allowSavingEpochs
                        obj.wasSavingEpochs = get(obj.controls.saveEpochsCheckbox, 'Value') == get(obj.controls.saveEpochsCheckbox, 'Max');
                        set(obj.controls.saveEpochsCheckbox, 'Value', get(obj.controls.saveEpochsCheckbox, 'Min'));
                    elseif obj.wasSavingEpochs
                        set(obj.controls.saveEpochsCheckbox, 'Value', get(obj.controls.saveEpochsCheckbox, 'Max'));
                    end
                else
                    % The user cancelled editing the parameters so switch back to the previous protocol.
                    obj.protocolValue = find(strcmp(obj.protocolClassNames, class(obj.protocol)));
                    set(obj.controls.protocolPopup, 'Value', obj.protocolValue);
                end
            end
        end
        
        function editProtocolParameters(obj, ~, ~)
            if editParameters(obj.protocol)
                
            end
        end
        
        %% Figure Handlers
        function discoverFigureHandlers(obj)
            % Get the list of figure handlers from the 'Figure Handlers' folder.
            symphonyPath = mfilename('fullpath');
            parentDir = fileparts(symphonyPath);
            handlersDir = fullfile(parentDir, 'Figure Handlers', '*.m');
            handlerFileNames = dir(handlersDir);
            obj.figureHandlerClasses = containers.Map;
            for i = 1:length(handlerFileNames)
                if ~handlerFileNames(i).isdir && handlerFileNames(i).name(1) ~= '.'
                    className = handlerFileNames(i).name(1:end-2);
                    typeName = classProperty(className, 'figureType');
                    if ~isempty(typeName)
                        obj.figureHandlerClasses(typeName) = className;
                    end
                end
            end
        end
        
        %% Sources
        function discoverSources(obj)
            parentDir = fileparts(mfilename('fullpath'));
            fid = fopen(fullfile(parentDir, 'SourceHierarchy.txt'));
            sourceText = fread(fid, '*char');
            fclose(fid);
            
            sourceLines = regexp(sourceText', '\n', 'split')';
            
            obj.sources = Source('Sources');
            curPath = obj.sources;
            
            for i = 1:length(sourceLines)
                line = sourceLines{i};
                if ~isempty(line)
                    indent = 0;
                    while strcmp(line(1), char(9))
                        line = line(2:end); % strip leading \t
                        indent = indent + 1;
                    end
                    curPath = curPath(1:indent+1);
                    source = Source(line, curPath(end));
                    curPath(end + 1) = source; %#ok<AGROW>
                end
            end
        end
        
        %% Logging
        function enableLogging(obj, ~, ~)
            obj.logging = get(obj.controls.enableLoggingCheckbox, 'Value');
            
            if(obj.logging)
                obj.protocol.logFileFolders = {obj.logFileFolder,obj.hiddenLogFileFolder};
                obj.protocol.openLog();
            else
                deleteLog = questdlg('Are you sure you want to stop logging', 'Stop Logging', 'Yes', 'No', 'No');
                if strcmp(deleteLog, 'Yes')
                    obj.protocol.closeLog();
                else
                    set(obj.controls.enableLoggingCheckbox, 'Value', 1);
                end
            end
        end
        
        function changeLogFileFolder(obj,~,~)
            obj.logFileFolder = uigetdir(obj.logFileFolder, 'Log File Location');
            setpref('SymphonyProtocol', 'logFileFolder', obj.logFileFolder);
            obj.protocol.logFileFolder = obj.logFileFolder;
            set(obj.controls.loggingFolderView, 'String', obj.logFileFolder);
        end
        
        %% GUI layout/control
        function showMainWindow(obj)
            import Symphony.Core.*;
            
            obj.wasSavingEpochs = true;
            
            % Restore the window position if possible.
            if ispref('Symphony', 'MainWindow_Position')
                addlProps = {'Position', getpref('Symphony', 'MainWindow_Position')};
            else
                addlProps = {};
            end
            
            obj.protocol.logFileFolders = {obj.logFileFolder,obj.hiddenLogFileFolder};
            
            % Create the user interface.
            obj.mainWindow = figure(...
                'Units', 'points', ...
                'Menubar', 'none', ...
                'Name', 'Symphony', ...
                'NumberTitle', 'off', ...
                'ResizeFcn', @(hObject,eventdata)windowDidResize(obj,hObject,eventdata), ...
                'CloseRequestFcn', @(hObject,eventdata)closeRequestFcn(obj,hObject,eventdata), ...
                'Position', centerWindowOnScreen(364, 350), ...
                'UserData', [], ...
                'Tag', 'figure', ...
                addlProps{:});
            
            bgColor = get(obj.mainWindow, 'Color');
            
            obj.controls = struct();
            
            % Create the rig configuration controls
            
            obj.controls.rigConfigPanel = uipanel(...
                'Parent', obj.mainWindow, ...
                'Units', 'points', ...
                'FontSize', 12, ...
                'Title', 'Rig Configuration', ...
                'Tag', 'protocolPanel', ...
                'Clipping', 'on', ...
                'Position', [10 329 336 50], ...
                'BackgroundColor', bgColor);
            
            obj.controls.rigConfigPopup = uicontrol(...
                'Parent', obj.controls.rigConfigPanel, ...
                'Units', 'points', ...
                'Callback', @(hObject,eventdata)chooseRigConfiguration(obj,hObject,eventdata), ...
                'Position', [10 5 200 22], ...
                'BackgroundColor', bgColor, ...
                'String', obj.rigConfigDisplayNames, ...
                'Style', 'popupmenu', ...
                'Value', obj.rigConfigValue, ...
                'Tag', 'rigConfigPopup');
            
            obj.controls.rigDescButton = uicontrol(...
                'Parent', obj.controls.rigConfigPanel, ...
                'Units', 'points', ...
                'Callback', @(hObject,eventdata)showRigConfigurationDescription(obj,hObject,eventdata), ...
                'Position', [220 7 22 22], ...
                'BackgroundColor', bgColor, ...
                'String', '?', ...
                'Tag', 'rigDescButton');
            
            % Create the protocol controls.
            
            obj.controls.protocolPanel = uipanel(...
                'Parent', obj.mainWindow, ...
                'Units', 'points', ...
                'FontSize', 12, ...
                'Title', 'Protocol', ...
                'Tag', 'protocolPanel', ...
                'Clipping', 'on', ...
                'Position', [10 245 336 84], ...
                'BackgroundColor', bgColor);
            
            obj.controls.protocolPopup = uicontrol(...
                'Parent', obj.controls.protocolPanel, ...
                'Units', 'points', ...
                'Callback', @(hObject,eventdata)chooseProtocol(obj,hObject,eventdata), ...
                'Position', [10 44 130 22], ...
                'BackgroundColor', bgColor, ...
                'String', obj.protocolDisplayNames, ...
                'Style', 'popupmenu', ...
                'Value', 1, ...
                'Tag', 'protocolPopup');
            
            obj.controls.editParametersButton = uicontrol(...
                'Parent', obj.controls.protocolPanel, ...
                'Units', 'points', ...
                'Callback', @(hObject,eventdata)editProtocolParameters(obj,hObject,eventdata), ...
                'Position', [10 24 130 22], ...
                'BackgroundColor', bgColor, ...
                'String', 'Edit Parameters...', ...
                'Tag', 'editParametersButton');
            
            obj.controls.startButton = uicontrol(...
                'Parent', obj.controls.protocolPanel, ...
                'Units', 'points', ...
                'Callback', @(hObject,eventdata)startAcquisition(obj,hObject,eventdata), ...
                'Position', [170 42 70 22], ...
                'BackgroundColor', bgColor, ...
                'String', 'Start', ...
                'Tag', 'startButton');
            
            obj.controls.pauseButton = uicontrol(...
                'Parent', obj.controls.protocolPanel, ...
                'Units', 'points', ...
                'Callback', @(hObject,eventdata)pauseAcquisition(obj,hObject,eventdata), ...
                'Enable', 'off', ...
                'Position', [245 42 70 22], ...
                'BackgroundColor', bgColor, ...
                'String', 'Pause', ...
                'Tag', 'pauseButton');
            
            obj.controls.stopButton = uicontrol(...
                'Parent', obj.controls.protocolPanel, ...
                'Units', 'points', ...
                'Callback', @(hObject,eventdata)stopAcquisition(obj,hObject,eventdata), ...
                'Enable', 'off', ...
                'Position', [320 42 70 22], ...
                'BackgroundColor', bgColor, ...
                'String', 'Stop', ...
                'Tag', 'stopButton');
            
            obj.controls.statusLabel = uicontrol(...
                'Parent', obj.controls.protocolPanel, ...
                'Units', 'points', ...
                'FontSize', 12, ...
                'Callback', @(hObject,eventdata)editProtocolParameters(obj,hObject,eventdata), ...
                'Position', [170 10 140 18], ...
                'HorizontalAlignment', 'left', ...
                'BackgroundColor', bgColor, ...
                'String', 'Status:', ...
                'Style', 'text', ...
                'Tag', 'statusLabel');
            
            % Save epochs checkbox
            
            obj.controls.saveEpochsCheckbox = uicontrol(...
                'Parent', obj.mainWindow, ...
                'Units', 'points', ...
                'FontSize', 12, ...
                'Position', [10 220 145 18], ...
                'BackgroundColor', bgColor, ...
                'String', 'Save Epochs with Group', ...
                'Value', uint8(obj.protocol.allowSavingEpochs), ...
                'Style', 'checkbox', ...
                'Tag', 'saveEpochsCheckbox');
            
            obj.controls.notSavingEpochsText = uicontrol(...
                'Parent', obj.mainWindow, ...
                'Units', 'points', ...
                'FontSize', 18, ...
                'HorizontalAlignment', 'right', ...
                'Position', [85 110 270 20], ...
                'BackgroundColor', bgColor, ...
                'ForegroundColor', 'red', ...
                'Visible', 'off', ...
                'String', 'Epoch data is not being saved', ...
                'Style', 'text', ...
                'Tag', 'notSavingEpochsText');
            addlistener(obj.controls.saveEpochsCheckbox, 'Value', 'PostSet', @obj.updateUIState);
            
            % Create the epoch group controls
            
            obj.controls.epochPanel = uipanel(...
                'Parent', obj.mainWindow, ...
                'Units', 'points', ...
                'FontSize', 12, ...
                'Title', 'Epoch Group', ...
                'Tag', 'uipanel1', ...
                'Clipping', 'on', ...
                'Position', [10 60 336 150], ...
                'BackgroundColor', bgColor);
            
            uicontrol(...
                'Parent', obj.controls.epochPanel, ...
                'Units', 'points', ...
                'FontSize', 12, ...
                'HorizontalAlignment', 'right', ...
                'Position', [8 110 67 16], ...
                'BackgroundColor', bgColor, ...
                'String', 'Output path:', ...
                'Style', 'text', ...
                'Tag', 'text3');
            
            obj.controls.epochGroupOutputPathText = uicontrol(...
                'Parent', obj.controls.epochPanel, ...
                'Units', 'points', ...
                'FontSize', 12, ...
                'HorizontalAlignment', 'left', ...
                'Position', [78 111 250 14], ...
                'BackgroundColor', bgColor, ...
                'String', '', ...
                'Style', 'text', ...
                'Tag', 'epochGroupOutputPathText');
            
            uicontrol(...
                'Parent', obj.controls.epochPanel, ...
                'Units', 'points', ...
                'FontSize', 12, ...
                'HorizontalAlignment', 'right', ...
                'Position', [8 94 67 16], ...
                'BackgroundColor', bgColor, ...
                'String', 'Label:', ...
                'Style', 'text', ...
                'Tag', 'text5');
            
            obj.controls.epochGroupLabelText = uicontrol(...
                'Parent', obj.controls.epochPanel, ...
                'Units', 'points', ...
                'FontSize', 12, ...
                'HorizontalAlignment', 'left', ...
                'Position', [78 95 250 14], ...
                'BackgroundColor', bgColor, ...
                'String', '', ...
                'Style', 'text', ...
                'Tag', 'epochGroupLabelText');
            
            uicontrol(...
                'Parent', obj.controls.epochPanel, ...
                'Units', 'points', ...
                'FontSize', 12, ...
                'HorizontalAlignment', 'right', ...
                'Position', [8 78 67 16], ...
                'BackgroundColor', bgColor, ...
                'String', 'Source:', ...
                'Style', 'text', ...
                'Tag', 'text7');
            
            obj.controls.epochGroupSourceText = uicontrol(...
                'Parent', obj.controls.epochPanel, ...
                'Units', 'points', ...
                'FontSize', 12, ...
                'HorizontalAlignment', 'left', ...
                'Position', [78 79 250 14], ...
                'BackgroundColor', bgColor, ...
                'String', '', ...
                'Style', 'text', ...
                'Tag', 'epochGroupSourceText');
            
            obj.controls.epochKeywordsLabel = uicontrol(...
                'Parent', obj.controls.epochPanel, ...
                'Units', 'points', ...
                'FontSize', 12, ...
                'HorizontalAlignment', 'right', ...
                'Position', [10 43 170 17.6], ...
                'BackgroundColor', bgColor, ...
                'String', 'Keywords for future epochs:', ...
                'Style', 'text', ...
                'Tag', 'text2');
            
            obj.controls.epochKeywordsEdit = uicontrol(...
                'Parent', obj.controls.epochPanel, ...
                'Units', 'points', ...
                'FontSize', 12, ...
                'HorizontalAlignment', 'left', ...
                'Position', [190 43 160 26], ...
                'BackgroundColor', bgColor, ...
                'String', blanks(0), ...
                'Style', 'edit', ...
                'Tag', 'epochKeywordsEdit');
            
            obj.controls.newEpochGroupButton = uicontrol(...
                'Parent', obj.controls.epochPanel, ...
                'Units', 'points', ...
                'Callback', @(hObject,eventdata)createNewEpochGroup(obj,hObject,eventdata), ...
                'Position', [10 10 100 22], ...
                'BackgroundColor', bgColor, ...
                'String', 'New...', ...
                'Tag', 'newEpochGroupButton');
            
            obj.controls.addNoteButton = uicontrol(...
                'Parent', obj.controls.epochPanel, ...
                'Units', 'points', ...
                'Callback', @(hObject,eventdata)promptForNote(obj,hObject,eventdata), ...
                'Position', [117.5 10 100 22], ...
                'BackgroundColor', bgColor, ...
                'String', 'Add Note...', ...
                'Tag', 'addNoteButton');
            
            obj.controls.closeEpochGroupButton = uicontrol(...
                'Parent', obj.controls.epochPanel, ...
                'Units', 'points', ...
                'Callback', @(hObject,eventdata)closeEpochGroup(obj,hObject,eventdata), ...
                'Position', [225 10 100 22], ...
                'BackgroundColor', bgColor, ...
                'Enable', 'off', ...
                'String', 'Close', ...
                'Tag', 'closeEpochGroupButton');
            
            % Create the Log File Controls
            
            obj.controls.logFilePanel = uipanel(...
                'Parent', obj.mainWindow, ...
                'Units', 'points', ...
                'FontSize', 12, ...
                'Title', 'Log File', ...
                'Tag', 'logFilePanel', ...
                'Clipping', 'on', ...
                'Position', [10 10 336 50], ...
                'BackgroundColor', bgColor);
            
            obj.controls.enableLoggingCheckbox = uicontrol(...
                'Parent', obj.controls.logFilePanel, ...
                'Units', 'points', ...
                'Callback', @(hObject,eventdata)enableLogging(obj,hObject,eventdata), ...
                'FontSize', 12, ...
                'Position', [10 10 200 20], ...
                'BackgroundColor', bgColor, ...
                'String', 'Enable the Symphony Log File', ...
                'Value', obj.loggingOnDefault, ...
                'Style', 'checkbox', ...
                'Tag', 'saveEpochsCheckbox');
            
            obj.controls.loggingFolderView = uicontrol(...
                'Parent', obj.controls.logFilePanel, ...
                'Units','points',...
                'BackgroundColor',bgColor,...
                'Enable','off',...
                'Position',[200 10 250 22],...
                'String', obj.logFileFolder,...
                'Style','edit',...
                'Tag','loggingFolderView');
            
            obj.controls.loggingFolderChange = uicontrol(...
                'Parent', obj.controls.logFilePanel, ...
                'Units','points',...
                'Callback',@(hObject,eventdata)changeLogFileFolder(obj,hObject,eventdata),...
                'Position',[450 10 44 22],...
                'BackgroundColor', bgColor, ...
                'String','Change',...
                'Tag','loggingFolderChange');
            
            % Attempt to set button images using Java.
            try
                drawnow
                
                % Add images to the start, pause and stop buttons.
                imagesPath = fullfile(fileparts(mfilename('fullpath')), 'Images');
                
                jButton = java(findjobj(obj.controls.startButton));
                startIconPath = fullfile(imagesPath, 'start.png');
                jButton.setIcon(javax.swing.ImageIcon(startIconPath));
                jButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
                
                jButton = java(findjobj(obj.controls.pauseButton));
                pauseIconPath = fullfile(imagesPath, 'pause.png');
                jButton.setIcon(javax.swing.ImageIcon(pauseIconPath));
                jButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
                
                jButton = java(findjobj(obj.controls.stopButton));
                stopIconPath = fullfile(imagesPath, 'stop.png');
                jButton.setIcon(javax.swing.ImageIcon(stopIconPath));
                jButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
            catch ME %#ok<NASGU>
            end
            
            % Attempt to set the minimum window size using Java.
            try
                drawnow
                
                jFigPeer = get(handle(obj.mainWindow),'JavaFrame');
                jWindow = jFigPeer.fFigureClient.getWindow;
                if ~isempty(jWindow)
                    jWindow.setMinimumSize(java.awt.Dimension(540, 280));
                end
            catch ME %#ok<NASGU>
            end
            
            if obj.loggingOnDefault
                obj.enableLogging
            end
        end
        
        function windowDidResize(obj, ~, ~)
            figPos = get(obj.mainWindow, 'Position');
            figWidth = ceil(figPos(3));
            figHeight = ceil(figPos(4));
            
            % Expand the rig config panel to the full width and keep it at the top.
            rigConfigPanelPos = get(obj.controls.rigConfigPanel, 'Position');
            rigConfigPanelPos(2) = figHeight - 10 - rigConfigPanelPos(4);
            rigConfigPanelPos(3) = figWidth - 10 - 10;
            set(obj.controls.rigConfigPanel, 'Position', rigConfigPanelPos);
            rigDescButtonPos = get(obj.controls.rigDescButton, 'Position');
            rigDescButtonPos(1) = rigConfigPanelPos(3) - rigDescButtonPos(3) - 10;
            set(obj.controls.rigDescButton, 'Position', rigDescButtonPos);
            ripConfigPopupPos = get(obj.controls.rigConfigPopup, 'Position');
            ripConfigPopupPos(3) = rigDescButtonPos(1) - 10;
            set(obj.controls.rigConfigPopup, 'Position', ripConfigPopupPos);
            
            % Expand the protocol panel to the full width and keep it at the top.
            protocolPanelPos = get(obj.controls.protocolPanel, 'Position');
            protocolPanelPos(2) = rigConfigPanelPos(2) - 10 - protocolPanelPos(4);
            protocolPanelPos(3) = figWidth - 10 - 10;
            set(obj.controls.protocolPanel, 'Position', protocolPanelPos);
            statusPos = get(obj.controls.statusLabel, 'Position');
            statusPos(3) = protocolPanelPos(3) - 10 - statusPos(1);
            set(obj.controls.statusLabel, 'Position', statusPos);
            
            % Keep the "Save Epochs" checkbox between the two panels.
            saveEpochsPos = get(obj.controls.saveEpochsCheckbox, 'Position');
            saveEpochsPos(2) = protocolPanelPos(2) - 10 - saveEpochsPos(4);
            set(obj.controls.saveEpochsCheckbox, 'Position', saveEpochsPos);
            notSavingEpochsPos = get(obj.controls.notSavingEpochsText, 'Position');
            notSavingEpochsPos(1) = saveEpochsPos(1) + saveEpochsPos(3) + 10;
            notSavingEpochsPos(3) = figWidth - 10 - notSavingEpochsPos(1);
            notSavingEpochsPos(2) = saveEpochsPos(2);
            set(obj.controls.notSavingEpochsText, 'Position', notSavingEpochsPos);
            
            % Expand the epoch group panel to the full width and remaining height.
            epochPanelPos = get(obj.controls.epochPanel, 'Position');
            epochPanelPos(3) = figWidth - 10 - 10;
            epochPanelPos(4) = saveEpochsPos(2) - 10 - epochPanelPos(2);
            set(obj.controls.epochPanel, 'Position', epochPanelPos);
            outputPathPos = get(obj.controls.epochGroupOutputPathText, 'Position');
            outputPathPos(3) = epochPanelPos(3) - 10 - outputPathPos(1);
            set(obj.controls.epochGroupOutputPathText, 'Position', outputPathPos);
            labelPos = get(obj.controls.epochGroupLabelText, 'Position');
            labelPos(3) = epochPanelPos(3) - 10 - labelPos(1);
            set(obj.controls.epochGroupLabelText, 'Position', labelPos);
            sourcePos = get(obj.controls.epochGroupSourceText, 'Position');
            sourcePos(3) = epochPanelPos(3) - 10 - sourcePos(1);
            set(obj.controls.epochGroupSourceText, 'Position', sourcePos);
            epochKeywordsLabelPos = get(obj.controls.epochKeywordsLabel, 'Position');
            epochKeywordsLabelPos(2) = sourcePos(2) - 14 - epochKeywordsLabelPos(4);
            set(obj.controls.epochKeywordsLabel, 'Position', epochKeywordsLabelPos);
            epochKeywordsPos = get(obj.controls.epochKeywordsEdit, 'Position');
            epochKeywordsPos(2) = sourcePos(2) - 12 - epochKeywordsPos(4) + 4;
            epochKeywordsPos(3) = epochPanelPos(3) - 10 - epochKeywordsLabelPos(3) - 10 - 10;
            set(obj.controls.epochKeywordsEdit, 'Position', epochKeywordsPos);
            addNotePos = get(obj.controls.addNoteButton, 'Position');
            addNotePos(1) = (epochPanelPos(3) - addNotePos(3)) / 2.0;
            set(obj.controls.addNoteButton, 'Position', addNotePos);
            closeGroupPos = get(obj.controls.closeEpochGroupButton, 'Position');
            closeGroupPos(1) = epochPanelPos(3) - 14 - closeGroupPos(3);
            set(obj.controls.closeEpochGroupButton, 'Position', closeGroupPos);
            
            % Expand the logFilePanel to the full width and keep it at the top.
            logFilePanel = get(obj.controls.logFilePanel, 'Position');
            logFilePanel(3) = figWidth - 10 - 10;
            set(obj.controls.logFilePanel, 'Position', logFilePanel);
        end
        
        
        function updateUIState(obj, varargin)
            % Update the state of the UI based on the state of the protocol.
            set(obj.controls.statusLabel, 'String', ['Status: ' obj.protocol.state]);
            
            if strcmp(obj.protocol.state, 'stopped')
                set(obj.controls.rigConfigPopup, 'Enable', 'on');
                set(obj.controls.startButton, 'String', 'Start');
                if isempty(obj.missingDeviceName)
                    set(obj.controls.startButton, 'Enable', 'on');
                else
                    set(obj.controls.startButton, 'Enable', 'off');
                    set(obj.controls.statusLabel, 'String', ['The protocol cannot be run because there is no ''' obj.missingDeviceName ''' device.']);
                end
                set(obj.controls.pauseButton, 'Enable', 'off');
                set(obj.controls.stopButton, 'Enable', 'off');
                set(obj.controls.protocolPopup, 'Enable', 'on');
                set(obj.controls.editParametersButton, 'Enable', 'on');
                set(obj.controls.newEpochGroupButton, 'Enable', 'on');
                if isempty(obj.epochGroup)
                    set(obj.controls.epochKeywordsEdit, 'Enable', 'off');
                    set(obj.controls.addNoteButton, 'Enable', 'off');
                else
                    set(obj.controls.epochKeywordsEdit, 'Enable', 'on');
                    set(obj.controls.addNoteButton, 'Enable', 'on');
                end
                if isempty(obj.persistor)
                    set(obj.controls.closeEpochGroupButton, 'Enable', 'off');
                else
                    set(obj.controls.closeEpochGroupButton, 'Enable', 'on');
                end
                if isempty(obj.epochGroup) || ~obj.protocol.allowSavingEpochs
                    set(obj.controls.saveEpochsCheckbox, 'Enable', 'off');
                else
                    set(obj.controls.saveEpochsCheckbox, 'Enable', 'on');
                end
            else    % running or paused
                set(obj.controls.rigConfigPopup, 'Enable', 'off');
                set(obj.controls.stopButton, 'Enable', 'on');
                set(obj.controls.protocolPopup, 'Enable', 'off');
                set(obj.controls.saveEpochsCheckbox, 'Enable', 'off');
                set(obj.controls.newEpochGroupButton, 'Enable', 'off');
                set(obj.controls.closeEpochGroupButton, 'Enable', 'off');
                
                if strcmp(obj.protocol.state, 'running')
                    set(obj.controls.startButton, 'Enable', 'off');
                    set(obj.controls.pauseButton, 'Enable', 'on');
                    set(obj.controls.editParametersButton, 'Enable', 'off');
                    set(obj.controls.epochKeywordsEdit, 'Enable', 'off');
                    set(obj.controls.addNoteButton, 'Enable', 'off');
                elseif strcmp(obj.protocol.state, 'paused')
                    set(obj.controls.startButton, 'String', 'Resume');
                    set(obj.controls.startButton, 'Enable', 'on');
                    set(obj.controls.pauseButton, 'Enable', 'off');
                    set(obj.controls.editParametersButton, 'Enable', 'on');
                    set(obj.controls.epochKeywordsEdit, 'Enable', 'on');
                    set(obj.controls.addNoteButton, 'Enable', 'on');
                end
            end
            
            saveEpochs = get(obj.controls.saveEpochsCheckbox, 'Value') == get(obj.controls.saveEpochsCheckbox, 'Max');
            if ~isempty(obj.epochGroup) && obj.protocol.allowSavingEpochs && ~saveEpochs
                set(obj.controls.notSavingEpochsText, 'Visible', 'on');
            else
                set(obj.controls.notSavingEpochsText, 'Visible', 'off');
            end
            
            % Update the epoch group settings.
            if isempty(obj.persistor)
                set(obj.controls.epochGroupOutputPathText, 'String', '');
                set(obj.controls.epochGroupLabelText, 'String', '');
                set(obj.controls.epochGroupSourceText, 'String', '');
                set(obj.controls.closeEpochGroupButton, 'String', 'Close File');
            else
                set(obj.controls.epochGroupOutputPathText, 'String', obj.persistPath);
                if isempty(obj.epochGroup)
                    set(obj.controls.epochGroupLabelText, 'String', '');
                    set(obj.controls.epochGroupSourceText, 'String', '');
                else
                    % Show the 'label' hierarchy.
                    label = obj.epochGroup.label;
                    source = obj.epochGroup.source;
                    parentGroup = obj.epochGroup.parentGroup;
                    while ~isempty(parentGroup)
                        label = [parentGroup.label ' : ' label]; %#ok<AGROW>
                        source = parentGroup.source;
                        parentGroup = parentGroup.parentGroup;
                    end
                    set(obj.controls.epochGroupLabelText, 'String', label);
                    
                    % Show the source hierarchy.
                    sourceText = source.name;
                    curSource = source.parentSource;
                    while ~isempty(curSource)
                        sourceText = [curSource.name ' : ' sourceText]; %#ok<AGROW>
                        curSource = curSource.parentSource;
                    end
                    set(obj.controls.epochGroupSourceText, 'String', sourceText);
                end
                if isempty(obj.epochGroup)
                    set(obj.controls.closeEpochGroupButton, 'String', 'Close File');
                else
                    set(obj.controls.closeEpochGroupButton, 'String', 'End Group');
                end
            end
            
            drawnow expose
        end
        
        function closeRequestOnError(obj, ~, ~)
            % There was an error in Symphony so lets clear all none core
            % preferences so that the error is not propegated
            symphonyPref = getpref('Symphony');
            
            HekaBusID = symphonyPref.HekaBusID;
            MultiClamp_SerialNumber = symphonyPref.MultiClamp_SerialNumber;
            MainWindow_Position = symphonyPref.MainWindow_Position;
            
            clear symphonyPref;
            
            rmpref('Symphony');
            
            setpref('Symphony',{'HekaBusID','MultiClamp_SerialNumber','MainWindow_Position'},{HekaBusID,MultiClamp_SerialNumber,MainWindow_Position})
            % Delete the Main Window if it has been opened.
            delete(obj.mainWindow);
            delete(obj);
            close all;
            clear all *;
        end
        
        function closeRequestFcn(obj, ~, ~)
            % TODO: need to stop the protocol?
            
            obj.protocol.closeFigures();
            
            if ~isempty(obj.epochGroup)
                while ~isempty(obj.persistor)
                    obj.closeEpochGroup();
                end
            end
            
            % Break the reference loop on the source hierarchy so it gets deleted.
            delete(obj.sources);
            
            % Release any hold we have on hardware.
            obj.rigConfig.close();
            delete(obj.rigConfig);
            
            
            % close the protocols log functionality
            obj.protocol.closeLog();
            
            % Remember the window position.
            setpref('Symphony', 'MainWindow_Position', get(obj.mainWindow, 'Position'));
            
            % Delete the Main Window.
            delete(obj.mainWindow);
            
            % deleting the symphony Instance
            symphonyInstance = Symphony.getInstance;
            delete(symphonyInstance);
            
            % Delete the entire Symphony object
            delete(obj);
            
            close all;
            clear all *;
        end
        
        
        %% Epoch groups
        
        
        function createNewEpochGroup(obj, ~, ~)
            import Symphony.Core.*;
            
            try
                group = newEpochGroup(obj.epochGroup, obj.sources, obj.prevEpochGroup, obj.rigConfig.controller.Clock);
            catch ME  %#ok<NASGU>
                group = [];
            end
            
            if ~isempty(group)
                if isempty(obj.persistor)
                    % Create the persistor and metadata XML.
                    
                    % remove illegal characters from the group source name
                    % so that the file can be saved. Removing all illegal
                    % characters across windows and mac.
                    fileName = group.source.name;
                    fileName = regexprep(fileName,'[/?<>\\:*|]','');
  
                    if ismac
                        obj.persistPath = fullfile(group.outputPath, [fileName '.xml']);
                    else
                        obj.persistPath = fullfile(group.outputPath, [fileName '.h5']);
                    end
                                        
                    if exist(obj.persistPath, 'file')
                        choice = questdlg(['This will append to an existing file.' char(10) char(10) 'Do you wish to contiue?'], ...
                            'Symphony', 'Cancel', 'Continue', 'Continue');
                        if ~strcmp(choice, 'Continue')
                            return
                        end
                    end
                    
                    obj.metadataDoc = com.mathworks.xml.XMLUtils.createDocument('symphony-metadata');
                    obj.metadataNode = obj.metadataDoc.getDocumentElement();
                    
                    if exist(obj.persistPath, 'file')
                        % Make sure we have the same source UUID's as before.
                        [pathstr, name, ~] = fileparts(obj.persistPath);
                        metadataPath = fullfile(pathstr,[name '_metadata.xml']);
                        xmlDoc = xmlread(metadataPath);
                        rootNode = xmlDoc.getDocumentElement();
                        children = rootNode.getChildNodes();
                        for i = 1:children.getLength()
                            childNode = children.item(i - 1);
                            if childNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE && ...
                                    strcmp(char(childNode.getNodeName()), 'source')
                                obj.sources.childSources(1).syncWithMetadata(childNode);
                                break;
                            end
                        end
                        
                        % Add the source hierarchy to the metadata.
                        group.source.persistToMetadata(obj.metadataNode);
                        
                        % Re-add any notes.
                        noteNodes = rootNode.getElementsByTagName('note');
                        for i = 1:noteNodes.getLength()
                            noteNode = noteNodes.item(i - 1);
                            time = char(noteNode.getAttributes().getNamedItem('time').getNodeValue());
                            obj.addNote(noteNode.getTextContent(), time);
                        end
                    else
                        % Add the source hierarchy to the metadata.
                        group.source.persistToMetadata(obj.metadataNode);
                    end
                    
                    if ismac
                        obj.persistor = EpochXMLPersistor(obj.persistPath);
                    else
                        obj.persistor = EpochHDF5Persistor(obj.persistPath,System.String(''), 9);
                    end
                    
                    obj.saveMetadata();
                    
                end
                
                obj.epochGroup = group;
                
                obj.protocol.epochGroup = obj.epochGroup;
                
                obj.protocol.logEpochGroup();
                
                obj.epochGroup.beginPersistence(obj.persistor);
                
                obj.updateUIState();
            end
        end
        
        
        function saveMetadata(obj)
            [pathstr, name, ~] = fileparts(obj.persistPath);
            metadataPath = fullfile(pathstr,[name '_metadata.xml']);
            xmlwrite(metadataPath, obj.metadataDoc);
        end
        
        
        function closeEpochGroup(obj, ~, ~)
            if ~isempty(obj.epochGroup)
                % Clean up the epoch group and persistor.
                obj.epochGroup.endPersistence(obj.persistor);
                
                if isempty(obj.epochGroup.parentGroup)
                    obj.prevEpochGroup = obj.epochGroup;
                    obj.epochGroup = [];
                else
                    obj.epochGroup = obj.epochGroup.parentGroup;
                end
                
            else
                obj.persistor.CloseDocument();
                obj.persistor.Dispose();
                obj.persistor = [];
                
                % Break the reference loop on the group hierarchy so they all get deleted.
                delete(obj.prevEpochGroup);
                obj.prevEpochGroup = [];
                
                obj.saveMetadata();
                obj.metadataDoc = [];
                obj.metadataNode = [];
                obj.notesNode = [];
            end
            obj.updateUIState();
        end
        
        
        %% Notes
        
        
        function promptForNote(obj, ~, ~)
            noteText = inputdlg('Enter a note:', 'Symphony Note', 4, {''}, 'on');
            
            if ~isempty(noteText)
                noteText2 = '';
                for i = 1:size(noteText{1}, 1)
                    noteText2 = [noteText2 strtrim(noteText{1}(i, :)) char(10)]; %#ok<AGROW>
                end
                noteText2 = noteText2(1:end - 1);   % strip off the last newline
                
                obj.addNote(noteText2);
            end
        end
        
        
        function addNote(obj, noteText, time)
            if nargin == 2
                time = char(obj.rigConfig.controller.Clock.Now().ToString());
            end
            
            if isempty(obj.notesNode)
                obj.notesNode = obj.metadataNode.appendChild(obj.metadataDoc.createElement('notes'));
            end
            
            noteNode = obj.notesNode.appendChild(obj.metadataDoc.createElement('note'));
            noteNode.setAttribute('time', time);
            noteNode.appendChild(obj.metadataDoc.createTextNode(noteText));
            
            obj.saveMetadata();
        end
        
        
        %% Protocol starting/pausing/stopping
        
        
        function startAcquisition(obj, ~, ~)
            % Edit the protocol parameters if the user hasn't done so already.
            if ~obj.protocol.rigPrepared
                if ~editParameters(obj.protocol)
                    % The user cancelled.
                    return
                end
            end
            
            saveEpochs = get(obj.controls.saveEpochsCheckbox, 'Value') == get(obj.controls.saveEpochsCheckbox, 'Max');
            if saveEpochs
                obj.protocol.persistor = obj.persistor;
            else
                obj.protocol.persistor = [];
            end
            
            keywordsText = get(obj.controls.epochKeywordsEdit, 'String');
            if isempty(keywordsText)
                obj.protocol.epochKeywords = {};
            else
                obj.protocol.epochKeywords = strtrim(regexp(keywordsText, ',', 'split'));
            end
            
            % Run the protocol wrapped in a try/catch block so we can be sure to re-enable the GUI.
            try
                obj.protocol.run();
            catch ME
                % Reenable the GUI.
                obj.updateUIState();
                
                rethrow(ME);
            end
            obj.updateUIState();
        end
        
        
        function pauseAcquisition(obj, ~, ~)
            % The user clicked the Pause button.
            obj.protocol.pause();
        end
        
        
        function stopAcquisition(obj, ~, ~)
            % The user clicked the Stop button.
            obj.protocol.stop();
        end
    end
end
